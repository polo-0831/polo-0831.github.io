<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>信号与系统--傅里叶变换的思考</title>
    <url>/2022/07/06/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F-%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>一切源于一个疑问，为什么傅里叶正变换表达式中将时域信号f乘上虚指数因子再积分就能转换为频域呢？</p>
<span id="more"></span>

<p>第一直觉便是欧拉公式，合适的时域信号可以转换为一系列不同频率的余弦信号，欧拉公式恰好是连接指数与三角函数的桥梁，隐隐约约的在公式里体现了它转换的内涵。但是这一个虚指数因子到底是怎么运作的呢？<br>假设现在有一个频率为3的余弦信号，1s振动3次，如果我用旋转矢量图来表示余弦信号的幅值［0，2A］，矢量长度代表余弦信号幅值大小。旋转矢量每2s转一圈，那么图中大概可以看出是画了六个花瓣（对应2s内信号的六个幅值）；倘若旋转矢量每1/3s转一圈，即1秒3圈，那么图中只有一个花瓣。</p>
<p><img src="/2022/07/06/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F-%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2%E7%9A%84%E6%80%9D%E8%80%83/419C4FEBDCEDFC3694F4FA0AB8FC9DBB.jpg" alt="img"></p>
<p><strong>恰好旋转矢量的旋转频率正是对应着余弦信号的频率。真的是巧合吗？</strong><br>随着旋转矢量的转速发生变化，花瓣数量也在变化，但画出的图像也会有混沌的时刻，当达到信号频率的时候就会变得有规律。如果我们能找到一种描述图形规律性的办法，就能找出我们需要的旋转频率。这里我们吧图形看作一个有质量的物体，存在重心（如下图红点）。当图形混沌的时候，重心总是接近于原点；而当其规律的时候，重心将会相对偏移原点很多。如果我们把重心离原点的距离向量与旋转频率联系起来，画出二维函数图，就能找到我们所要的频率。</p>
<p><img src="/2022/07/06/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F-%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2%E7%9A%84%E6%80%9D%E8%80%83/443548F907E8412739E85369052E5650-16571181147071.jpg" alt="img"></p>
<p>回顾一下，我们引入了旋转矢量和重心向量的观点，从另一个角度找到了分解信号频率的方法。那么，这跟虚指数因子有什么关系呢？<br>在描述重心向量的时候，它总是绕着原点旋转移动，而复平面恰好是一个适合描述旋转的二维平面。利用欧拉恒等式，恰好可以用虚指数因子来表示出向量的旋转。</p>
<p><img src="/2022/07/06/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F-%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2%E7%9A%84%E6%80%9D%E8%80%83/C2E8860ED8FAEC8FAE2A26D5CE68DA2A.jpg" alt="img"></p>
<p>为什么能用指数因子来表示复平面上的旋转呢？欧拉公式可以知道，指数展开后实部为余弦函数，虚部为正弦函数，在同一时间上，正余弦函数的幅值之和恒等于1，真好在复平面上画出一个单位圆，怪不得说欧拉公式是最美丽的公式。而指数的幂中i的系数恰好体现了它的旋转速度，如果系数是ω，根据欧拉公式它也可以体现三角函数的频率，于是我们把信号频率–旋转矢量转速–三角函数频率连接了起来，所用到的正是这个虚指数因子。</p>
<p><img src="/2022/07/06/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F-%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2%E7%9A%84%E6%80%9D%E8%80%83/3139D2C0CA4E7384F68C995EFF09AEC7.jpg" alt="img"></p>
<p>到此为止，正是从复平面描述旋转的角度进行观察，理解了傅里叶变换的实质。<br>数学太奇妙了，感谢3蓝1棕</p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
  </entry>
  <entry>
    <title>【环境配置】windows+anaconda配置pytorch+gpu环境</title>
    <url>/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="说点什么"><a href="#说点什么" class="headerlink" title="说点什么"></a>说点什么</h1><p>​        为什么要自己写一篇环境配置的博客呢？前些日子系统坏了需要重装系统，再次配置环境的时候又要在网上搜索参差不齐的系统安装博客，很麻烦。</p>
<p>​        没错，怕麻烦，所以自己总结。</p>
<p>​        本片文章没有赘述如何安装anaconda和python，记录了安装GPU相关工具包时的一些思考和具体安装方法。</p>
<span id="more"></span>

<h1 id="安装Cuda和cudnn"><a href="#安装Cuda和cudnn" class="headerlink" title="安装Cuda和cudnn"></a>安装Cuda和cudnn</h1><h2 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h2><h3 id="什么是CUDA"><a href="#什么是CUDA" class="headerlink" title="什么是CUDA"></a>什么是CUDA</h3><p>​        2006年，NVIDIA公司发布了CUDA(Compute Unified Device Architecture)，是一种新的操作GPU计算的硬件和软件架构，是建立在NVIDIA的GPUs上的一个通用并行计算平台和编程模型，它提供了GPU编程的简易接口，基于CUDA编程可以构建基于GPU计算的应用程序，利用GPUs的并行计算引擎来更加高效地解决比较复杂的计算难题。它将GPU视作一个数据并行计算设备，而且无需把这些计算映射到图形API。操作系统的多任务机制可以同时管理CUDA访问GPU和图形程序的运行库，其计算特性支持利用CUDA直观地编写GPU核心程序。</p>
<p>​        <strong>我自己的理解：CUDA类似于驱动，是用户对显卡编程的接口，安装了它就能使用你的GPU进行编程了。就像操控电机需要设计驱动模块来调整电平，否则单片机不能直接控制。</strong></p>
<p>​        我们想增加神经网络的训练速度，当然想尽可能的提高自己电脑的算力，如果用CPU版本的话，你的显卡（GPU）就在发呆，摆烂怎么可以呢！所以我们安装CUDN，配合pytorch的GPU版本进行网络训练。</p>
<h3 id="下载安装合适版本的CUDA"><a href="#下载安装合适版本的CUDA" class="headerlink" title="下载安装合适版本的CUDA"></a>下载安装合适版本的CUDA</h3><p>​    <strong>1、查看你的电脑显卡支持的CUDA版本</strong></p>
<p>​        方法一：通过N卡控制面板</p>
<p>​        ①右键右下角nvidia面板进入N卡控制面板</p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220416161928461.png" alt="image-20220416161928461"></p>
<p>​        ②点击左下角的系统信息</p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220416162025389.png" alt="image-20220416162025389"></p>
<p>​        ③选择“组件”，可以看到自己的CUDA版本。博主RTX2060的显卡搭配的CUDA版本是11.2</p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220416162105616.png" alt="image-20220416162105616"></p>
<p>​        方法二：cmd命令行输入 nvidia-smi</p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220416162316611.png" alt="image-20220416162316611"></p>
<p>​    <strong>2、下载CUDA</strong></p>
<p>​        ①进入[CUDA官网](<a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA Toolkit Archive | NVIDIA Developer</a>)查看自己的版本下载安装软件，并且安装（无需修改路径，环境的东西就塞在C盘）</p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220416162621413.png" alt="image-20220416162621413"></p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220416162737991.png" alt="image-20220416162737991"></p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220416162932165.png" alt="image-20220416162932165"></p>
<p>选择自定义，下一步</p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220416163209499.png" alt="image-20220416163209499"></p>
<p>如下图，下一步</p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220416163222305.png" alt="image-20220416163222305"></p>
<p>查看箭头所指这一项，如果新版本比当前版本更旧，则取消勾选，反之勾上，下一步</p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220416163310459.png" alt="image-20220416163310459"></p>
<p>不修改位置，就放在C盘，下一步</p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220416163403965.png" alt="image-20220416163403965"></p>
<p>安装结束之后在CMD中输入nvcc -V，输出如下信息则为成功：</p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220416163648581.png" alt="image-20220416163648581"></p>
<h2 id="Cudnn"><a href="#Cudnn" class="headerlink" title="Cudnn"></a>Cudnn</h2><h3 id="什么是Cudnn"><a href="#什么是Cudnn" class="headerlink" title="什么是Cudnn"></a>什么是Cudnn</h3><p>​        CUDNN(CUDA Deep Neural Network library)：是NVIDIA打造的针对深度神经网络的加速库，是一个用于深层神经网络的GPU加速库。如果你要用GPU训练模型，cuDNN不是必须的，但是一般会采用这个加速库。</p>
<p>​        我的理解：就是在CUDA“软件驱动”上增加更多工具，类似于python库内增加多几个函数供用户使用</p>
<h3 id="下载安装正确版本的Cudnn"><a href="#下载安装正确版本的Cudnn" class="headerlink" title="下载安装正确版本的Cudnn"></a>下载安装正确版本的Cudnn</h3><p>​        进入<a href="https://developer.nvidia.com/rdp/cudnn-archive#a-collapse51b">Cudnn官方下载链接</a>，我这里选择匹配我CUDA11.2版本的Cudnn</p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220416164205958.png" alt="image-20220416164205958"></p>
<p>​        解压cudnn-11.2-windows-x64-v8.1.1.33.zip压缩包，将压缩包内的三个文件夹复制，粘贴到C:\Program Files\NVIDIA GPU Toolkit\CUDA\v11.2 中，出现是否替换的提示选择替换即可。</p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220417203906152.png" alt="image-20220417203906152"></p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220417203941786.png" alt="image-20220417203941786"></p>
<p>​        随后打开系统环境变量，编辑Path变量，将如下路径添加到环境变量中</p>
<p>​        C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.2\libnvvp</p>
<p>​        C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.2\bin</p>
<p>​        C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.2\include</p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220417204304640.png" alt="image-20220417204304640"></p>
<p>​        重启生效，完成安装。</p>
<h1 id="安装Pytorch"><a href="#安装Pytorch" class="headerlink" title="安装Pytorch"></a>安装Pytorch</h1><p>​        进入pytorch[官方网站](<a href="https://pytorch.org/get-started/locally/">Start Locally | PyTorch</a>)，选择比自己CUDA版本低的安装，这里假设选择11.3，复制下面生成的conda命令。</p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220417204557907.png" alt="image-20220417204557907"></p>
<p>​        打开anaconda prompt命令行窗口，如下所示，路径前括号内代表当前所处的anaconda建立的环境，默认是base。初次登陆conda的话先换源，否则下载的库会很慢。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 清华源</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --set show_channel_urls yes   # 设置搜索时显示通道地址</span><br><span class="line"></span><br><span class="line"># or 中科大源</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure>

<p>​        换源之后，新建conda环境，随后按y表示同意下载。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n 环境名 python=x.x</span><br><span class="line">例： conda create -n pytorch python=3.8</span><br></pre></td></tr></table></figure>

<p>​        激活刚才新建的环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda activate 环境名</span><br><span class="line">例：conda activate pytorch</span><br></pre></td></tr></table></figure>

<p>​        将刚才在官网复制的conda命令粘贴运行即可，输入y之后开始下载。没换源的话下载很慢。下载完毕后，输入以下指令即可查看已安装的包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220417210241098.png" alt="image-20220417210241098"></p>
<p>​        完成配置，在pycharm上就可以使用已经配置好的conda环境。</p>
<h2 id="conda指令集合"><a href="#conda指令集合" class="headerlink" title="conda指令集合"></a>conda指令集合</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 环境指令</span><br><span class="line">列出所有环境	conda info --envs</span><br><span class="line">检查环境中python版本	python --version</span><br><span class="line">新建环境	conda create -n 环境名 python=3.7</span><br><span class="line">激活环境	source activate 环境名</span><br><span class="line">复制环境	conda create -n 新环境名 --clone 旧环境名</span><br><span class="line">删除环境	conda remove -n 环境名 --all</span><br><span class="line"># 包指令</span><br><span class="line">查看已安装包	conda list</span><br><span class="line">移除包		conda remove -n 环境名 安装包名</span><br><span class="line">移除当前环境中的包	conda remove package_name   </span><br><span class="line">更新包（某个）		conda update package_name</span><br><span class="line">更新包（全部）		conda update --all</span><br></pre></td></tr></table></figure>

<h1 id="没有11-2CUDA版本的pytorch该怎么办"><a href="#没有11-2CUDA版本的pytorch该怎么办" class="headerlink" title="没有11.2CUDA版本的pytorch该怎么办"></a>没有11.2CUDA版本的pytorch该怎么办</h1><p>​        博主是11.2CUDA版本，但是不想装适配10.2CUDA的pytorch，于是查询<a href="https://download.pytorch.org/whl/torch_stable.html">离线安装网站</a>找到了11.1CUDA版本的pytorch,下载好whl文件后在anaconda prompt内cd到对应安装路径安装即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install 文件名</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220417211046410.png" alt="image-20220417211046410"></p>
<p>​        从pytorch[官方](<a href="https://github.com/pytorch/vision#installation">pytorch/vision: Datasets, Transforms and Models specific to Computer Vision (github.com)</a>)给出的适配版本中可以看出，torch版本和torchvision之间有要求，根据自己要求选择即可。</p>
<p><img src="/2022/04/16/windows-anaconda%E9%85%8D%E7%BD%AEpytorch-gpu%E7%8E%AF%E5%A2%83/image-20220417211319914.png" alt="image-20220417211319914"></p>
<h1 id="2022-7-13更新"><a href="#2022-7-13更新" class="headerlink" title="2022.7.13更新"></a>2022.7.13更新</h1><p>今天在conda prompt内用命令更新了anaconda，结果导致缺少conda文件而不能使用conda命令，报错为：</p>
<p><strong>AttributeError:module ’ruamel_yaml’ has no attribute ‘representer’</strong> </p>
<p>网上搜了一通发现，重装anaconda也许是最省时的方法。于是重装了…</p>
<p>现在conda版本是:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) C:\Users\XXXXX&gt;conda --version</span><br><span class="line">conda 4.12.0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
  </entry>
  <entry>
    <title>To-do List</title>
    <url>/2022/06/30/To-do%20List/</url>
    <content><![CDATA[<h1 id="To-do-List"><a href="#To-do-List" class="headerlink" title="To-do List"></a>To-do List</h1><p>记着一直想做的事，2022大二下留</p>
<span id="more"></span>

<h2 id="学术上"><a href="#学术上" class="headerlink" title="学术上"></a>学术上</h2><ul>
<li><p><input checked disabled type="checkbox">  保持良好的求知欲</p>
</li>
<li><p><input disabled type="checkbox">  三年奖学金</p>
</li>
<li><p><input disabled type="checkbox">  雅思7.5</p>
</li>
<li><p><input disabled type="checkbox">  智能车竞赛能拿省一以上</p>
</li>
<li><p><input disabled type="checkbox">  科研成功在IEEE上发表</p>
</li>
</ul>
<h2 id="兴趣爱好上"><a href="#兴趣爱好上" class="headerlink" title="兴趣爱好上"></a>兴趣爱好上</h2><ul>
<li><p><input checked disabled type="checkbox">  用音乐和歌词记录自己的情感   2022.4.23</p>
</li>
<li><p><input disabled type="checkbox">  做出自己满意的一首电子</p>
</li>
<li><p><input disabled type="checkbox">  写出自己满意的一张说唱专辑</p>
</li>
<li><p><input disabled type="checkbox">  拍一部自导自演的悬疑电影</p>
</li>
<li><p><input disabled type="checkbox">  上台演唱自己喜欢的歌曲</p>
</li>
<li><p><input disabled type="checkbox">  制作一套摄影集</p>
</li>
<li><p><input disabled type="checkbox">  寻找机会接触Pioneer学习打碟做Set</p>
</li>
<li><p><input disabled type="checkbox">  拿到足协杯金靴（这个太难，能进球超过5个就行）</p>
</li>
</ul>
<hr>
<p>未来的愿望</p>
<ul>
<li><input disabled type="checkbox"> 去国外看一场足球赛</li>
<li><input disabled type="checkbox"> 让家人骄傲</li>
</ul>
<h2 id="心态上"><a href="#心态上" class="headerlink" title="心态上"></a>心态上</h2><ul>
<li><input checked disabled type="checkbox"> 保持对世界充满好奇心</li>
<li><input disabled type="checkbox"> 能吃更多不一样的苦</li>
<li><input disabled type="checkbox"> 保持谦逊</li>
<li><input checked disabled type="checkbox"> 保持乐观和社牛</li>
<li><input checked disabled type="checkbox"> 学会调整自己的情感</li>
<li><input checked disabled type="checkbox"> 保持对家人的感恩</li>
<li><input disabled type="checkbox"> 成熟、处事圆滑</li>
</ul>
]]></content>
      <categories>
        <category>生活的碎碎念</category>
      </categories>
  </entry>
  <entry>
    <title>神经网络学习笔记</title>
    <url>/2022/07/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="一、网络基础构成"><a href="#一、网络基础构成" class="headerlink" title="一、网络基础构成"></a>一、网络基础构成</h1><p>以最基础的CNN网络架构为例：包含<strong>卷积层、池化层和全连接层</strong></p>
<p><img src="/2022/07/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220708124629305.png" alt="image-20220708124629305"></p>
<p><a href="https://zhuanlan.zhihu.com/p/27642620">待看的神经网络各个部分的理解</a></p>
<p><strong>作用</strong></p>
<p>卷积层：用N个卷积核提取N维特征，并且缩小图片的大小，使得展平后运算量不大</p>
<p>池化层（下采样层）：用于降维减少神经网络的参数数量、扩大感受野、实现不变性</p>
<p>全连接层：起分类器的作用，且<strong>一定程度保留模型复杂度</strong></p>
<h2 id="1-卷积层"><a href="#1-卷积层" class="headerlink" title="1.卷积层"></a>1.卷积层</h2><p>卷积特性：<strong>具有局部感知机制、权值共享</strong></p>
<p><img src="/2022/07/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220708131910144.png" alt="image-20220708131910144"></p>
<p><strong>⚠输入特征矩阵深度＝卷积核深度</strong></p>
<p>⚠<strong>输出特征矩阵个数（map个数）＝卷积核个数   （即可以提取各种各样的特征map）</strong></p>
<p><img src="/2022/07/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220708132405382.png" alt="image-20220708132405382"></p>
<ul>
<li><p>W：输入图片大小  </p>
</li>
<li><p>F：卷积核(filter)大小</p>
</li>
<li><p>P：边缘扩充(padding)大小，一般左右和上下同时扩充，所以是2P</p>
</li>
<li><p>S：步长Stride</p>
</li>
</ul>
<p><strong>一层卷积的参数计算：HxWx输入特征层的深度x卷积核个数，如上图为3x3x3x2</strong></p>
<h2 id="2-池化层"><a href="#2-池化层" class="headerlink" title="2.池化层"></a>2.池化层</h2><p>最大池化和平均池化</p>
<p><img src="/2022/07/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220708132803269.png" alt="image-20220708132803269"></p>
<p>作用：对特征图进行稀疏处理，减少数据运算量。有待补充</p>
<h2 id="3-全连接层"><a href="#3-全连接层" class="headerlink" title="3.全连接层"></a>3.全连接层</h2><p><img src="/2022/07/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220708124357589.png" alt="image-20220708124357589"></p>
<p>参数数量：一个神经元就有一套参数，池化和卷积就是为了减少参数数量和提取特征而出现的</p>
<p><img src="/2022/07/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220708124516778.png" alt="image-20220708124516778"></p>
<h3 id="对全连接层FC的理解"><a href="#对全连接层FC的理解" class="headerlink" title="对全连接层FC的理解"></a>对全连接层FC的理解</h3><p><a href="https://blog.csdn.net/bl128ve900/article/details/95316038">全连接层的作用</a></p>
<p>作用一：<strong>把分布式特征representation映射到样本标记空间。</strong>人话：把卷积池化展平后的一堆数字进行全连接层里面的运算从而达到分类，就是分类。</p>
<p>作用二：<strong>用多层隐含层去拟合数据分布（非线性）。</strong>网上一种说法是类比于泰勒公式，每一层隐含层是神经元和激活函数组成，用多层非线性的函数（泰勒公式里的子项）来拟合更贴近于生活的非线性数据分布。这可能就是为什么需要用这种权重和偏置值的公式的原因。</p>
<h3 id="对激活函数的理解"><a href="#对激活函数的理解" class="headerlink" title="对激活函数的理解"></a>对激活函数的理解</h3><p>增加模型的非线性特性</p>
<p>有待补充</p>
<h1 id="二、反向传播算法BP"><a href="#二、反向传播算法BP" class="headerlink" title="二、反向传播算法BP"></a>二、反向传播算法BP</h1><h2 id="1-误差的计算-Loss值，也称误差梯度值"><a href="#1-误差的计算-Loss值，也称误差梯度值" class="headerlink" title="1.误差的计算(Loss值，也称误差梯度值)"></a>1.误差的计算(Loss值，也称误差梯度值)</h2><p>全连接神经网络如下所示，有一个隐含层，正向传播的出Loss需要经过三步：</p>
<ul>
<li>多层公式计算得出输出层<strong>y神经元的值</strong>，是归一化得到<strong>各标签实际概率</strong></li>
<li>将标签实际概率和标签理论概率用<strong>目标函数</strong>得出Loss</li>
</ul>
<p><img src="/2022/07/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CF916ED7D561D11DFB1616482C749667-16572624575102.jpg" alt="img"></p>
<h2 id="2-误差的反向传播-采用误差梯度"><a href="#2-误差的反向传播-采用误差梯度" class="headerlink" title="2.误差的反向传播(采用误差梯度)"></a>2.误差的反向传播(采用误差梯度)</h2><p>误差的反向传播使用的是梯度下降法，误差梯度的本质是一个向量，而不是一个具体的标量值。计算方法如下图所示，采用了链式法则。</p>
<p><img src="/2022/07/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/A6FE9710B65DCC240A451DC21BE22CC4.jpg" alt="img"></p>
<p>⚠⚠⚠⚠<strong>这里的梯度g(w)不是loss值，上图写错了</strong>。loss<strong>误差</strong>是标量，是根据目标函数算出来的一个衡量神经网络计算结果与理想结果差距的值，上述用了交叉熵目标函数；而<strong>误差梯度</strong>是误差对某一个权重参数w的偏导，是矢量。</p>
<h2 id="3-权重的更新-梯度下降法、优化器"><a href="#3-权重的更新-梯度下降法、优化器" class="headerlink" title="3.权重的更新(梯度下降法、优化器)"></a>3.权重的更新(梯度下降法、优化器)</h2><p><a href="https://www.bilibili.com/video/BV1Ux411j7ri?spm_id_from=333.337.search-card.all.click&vd_source=2625b5eda84e0a3a4b91e010796be1d4">【官方双语】深度学习之梯度下降法 Part 2 ver 0.9 beta_哔哩哔哩_bilibili</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/152566066">梯度下降法(SGD)原理解析及其改进优化算法 （内包含对batch的理解）</a></p>
<p><img src="/2022/07/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220708143406994.png" alt="image-20220708143406994"></p>
<p>将误差梯度放入<strong>优化器</strong>中进行权重的调整，一步一步将损失梯度调整到最小，此时权重最适合目标网络。</p>
<p>目前普遍的优化器有SGD、Adam等，其中SGD的函数表示：</p>
<p><img src="/2022/07/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220708143303814.png" alt="image-20220708143303814"></p>
<p>这里的权重w是一个向量，是一整个层的参数矩阵的某一列向量</p>
<h3 id="批训练导致梯度下降到局部最优的理解"><a href="#批训练导致梯度下降到局部最优的理解" class="headerlink" title="批训练导致梯度下降到局部最优的理解"></a>批训练导致梯度下降到局部最优的理解</h3><p>如下图为一个权重的梯度空间，如果导入全部图片的训练数据，那么每一次梯度调整都是奔着最理想的情况去的，但是运算能力没有这么强，于是有了<strong>批训练</strong>，梯度下降的每一步可能走的更曲折，最终可能达到最低或者局部最低</p>
<p><img src="/2022/07/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.jpg" alt="img"></p>
<h1 id="三、简单编写CNN训练代码——pytorch"><a href="#三、简单编写CNN训练代码——pytorch" class="headerlink" title="三、简单编写CNN训练代码——pytorch"></a>三、简单编写CNN训练代码——pytorch</h1><p><a href="https://pytorch.org/docs/stable/">PyTorch API查询— PyTorch 1.12 documentation</a></p>
<h2 id="1-model-py"><a href="#1-model-py" class="headerlink" title="1. model.py"></a>1. model.py</h2><p>所需模块：torch.nn：定义网络各层</p>
<p>主要步骤：1、定义一个类继承nn.Module，用super函数继承父类</p>
<h2 id="2-train-py-和-test-py"><a href="#2-train-py-和-test-py" class="headerlink" title="2. train.py 和 test.py"></a>2. train.py 和 test.py</h2><h2 id="3-遇到的一些问题思考"><a href="#3-遇到的一些问题思考" class="headerlink" title="3.遇到的一些问题思考"></a>3.遇到的一些问题思考</h2><ol>
<li>使用Dataloader迭代器的时候，需要额外<strong>import torch.utils.data</strong>而不能直接使用torch.utils.data。</li>
</ol>
<p><a href="https://blog.csdn.net/rocketeerLi/article/details/90523649">AttributeError: module ‘torch.utils’ has no attribute ‘data’ 解决方法_</a></p>
<p><a href="https://www.jianshu.com/p/4db9ff5b7485">Python import 到底引入了什么 </a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">trainloader = torch.utils.data.DataLoader(dataset=trainset, batch_size=36, shuffle=True, num_workers=0)</span><br></pre></td></tr></table></figure>

<p>同理关于import的学问，matplotlib也不能用import matplotlib，而是使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from matplotlib import pyplot as plt</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>每次训练batch时都要用zero_grad()清除优化器的梯度</li>
</ol>
<p><a href="https://blog.csdn.net/xiaoxifei/article/details/83474724"> Pytorch 为什么每一轮batch需要设置optimizer.zero_grad</a></p>
<h2 id="4-模型的保存"><a href="#4-模型的保存" class="headerlink" title="4.模型的保存"></a>4.模型的保存</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="comment"># 保存模型步骤</span></span><br><span class="line">torch.save(model, <span class="string">&#x27;net.pth&#x27;</span>)  <span class="comment"># 保存整个神经网络的模型结构以及参数</span></span><br><span class="line">torch.save(model, <span class="string">&#x27;net.pkl&#x27;</span>)  <span class="comment"># 同上</span></span><br><span class="line">torch.save(model.state_dict(), <span class="string">&#x27;net_params.pth&#x27;</span>)  <span class="comment"># 只保存模型参数</span></span><br><span class="line">torch.save(model.state_dict(), <span class="string">&#x27;net_params.pkl&#x27;</span>)  <span class="comment"># 同上</span></span><br><span class="line"><span class="comment"># 加载模型步骤</span></span><br><span class="line">model = torch.load(<span class="string">&#x27;net.pth&#x27;</span>)  <span class="comment"># 加载整个神经网络的模型结构以及参数</span></span><br><span class="line">model = torch.load(<span class="string">&#x27;net.pkl&#x27;</span>)  <span class="comment"># 同上</span></span><br><span class="line">model.load_state_dict(torch.load(<span class="string">&#x27;net_params.pth&#x27;</span>)) <span class="comment"># 仅加载参数</span></span><br><span class="line">model.load_state_dict(torch.load(<span class="string">&#x27;net_params.pkl&#x27;</span>)) <span class="comment"># 同上</span></span><br><span class="line"><span class="comment"># 保存为pth文件可以用neutron软件查看网络结构</span></span><br></pre></td></tr></table></figure>



<h1 id="五、训练集、验证集、测试集"><a href="#五、训练集、验证集、测试集" class="headerlink" title="五、训练集、验证集、测试集"></a>五、训练集、验证集、测试集</h1><p><strong>训练集(Train Set):</strong> 用于训练网络的输入数据，调整网络的权重矩阵</p>
<p><strong>验证集(Validation Set):</strong> 用于调整和选择模型，根据验证集产生的指标来选择最合适的训练参数，如学习率、正则化方式、Adam的参数等等。</p>
<p>训练和验证是在训练这个步骤里进行的，训练验证完成就已经是最优的模型</p>
<p><strong>测试集(Test Set):</strong> 用于评估最终的模型</p>
<h2 id="1-验证和交叉验证"><a href="#1-验证和交叉验证" class="headerlink" title="1.验证和交叉验证"></a>1.验证和交叉验证</h2><p>收藏一个大佬的博客：<a href="https://www.cnblogs.com/HuZihu/p/9368362.html">验证和交叉验证（Validation &amp; Cross Validation） - HuZihu - 博客园 (cnblogs.com)</a></p>
<h1 id="六、Alexnet、VGG"><a href="#六、Alexnet、VGG" class="headerlink" title="六、Alexnet、VGG"></a>六、Alexnet、VGG</h1><h2 id="Dropout层"><a href="#Dropout层" class="headerlink" title="Dropout层"></a>Dropout层</h2><p>训练过程中，随机失活正向传播过程中的部分神经元，防止训练过拟合</p>
<p>验证过程不失活</p>
<h2 id="感受野Receptive-field"><a href="#感受野Receptive-field" class="headerlink" title="感受野Receptive field"></a>感受野Receptive field</h2><p>输出特征矩阵的一个单元对应输入层上的区域大小，一种表达特征概括能力的参数。</p>
<p>VGG网络中用多层小卷积核来代替一个大卷积核从而减少网络参数，如3个3x3代表1个7x7卷积核，计算出来它们代表的感受野是一样的。</p>
<p><img src="/2022/07/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220717201919049.png" alt="image-20220717201919049"></p>
<h2 id="初始化权重"><a href="#初始化权重" class="headerlink" title="初始化权重"></a>初始化权重</h2><p>定义网络class的时候，可以添加是否初始化权重的参数，下列截图是初始化函数，用了<strong>凯明</strong>初始化权重法把网络里的卷积层给初始化</p>
<p><img src="/2022/07/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220717200429426.png" alt="image-20220717200429426"></p>
<h1 id="七、GoogLeNet"><a href="#七、GoogLeNet" class="headerlink" title="七、GoogLeNet"></a>七、GoogLeNet</h1><h2 id="网络特点和结构"><a href="#网络特点和结构" class="headerlink" title="网络特点和结构"></a>网络特点和结构</h2><ul>
<li>采用了Inception结构，融合不同尺度的特征信息</li>
<li>用1*1卷积核进行降维处理</li>
<li>添加两个辅助分类器(Auxiliary Classifier)帮助训练</li>
</ul>
<p><img src="/2022/07/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/v2-766c3f59d3791da39ad805606d6445f6_r.jpg" alt="preview"></p>
<h2 id="局部响应归一化（LocalResponseNorm）"><a href="#局部响应归一化（LocalResponseNorm）" class="headerlink" title="局部响应归一化（LocalResponseNorm）"></a>局部响应归一化（LocalResponseNorm）</h2><h2 id="辅助分类器-Auxiliary-Classifier"><a href="#辅助分类器-Auxiliary-Classifier" class="headerlink" title="辅助分类器(Auxiliary Classifier)"></a>辅助分类器(Auxiliary Classifier)</h2><h1 id="八、ResNet"><a href="#八、ResNet" class="headerlink" title="八、ResNet"></a>八、ResNet</h1><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><h2 id="批归一化-Batch-Normalization"><a href="#批归一化-Batch-Normalization" class="headerlink" title="批归一化(Batch Normalization)"></a>批归一化(Batch Normalization)</h2><p>[Batch Normalization详解](<a href="https://blog.csdn.net/qq_37541097/article/details/104434557?ops_request_misc=%7B%22request_id%22:%22165813092816781685370529%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&amp;request_id=165813092816781685370529&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-104434557-null-null.185%5Ev2%5Econtrol&amp;utm_term=batch">https://blog.csdn.net/qq_37541097/article/details/104434557?ops_request_misc=%7B%22request%5Fid%22%3A%22165813092816781685370529%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fblog.%22%7D&amp;request_id=165813092816781685370529&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-104434557-null-null.185^v2^control&amp;utm_term=batch</a> normalization&amp;spm=1018.2226.3001.4450)</p>
<p><a href="https://www.bilibili.com/video/BV1bx411V798?spm_id_from=333.337.search-card.all.click&vd_source=2625b5eda84e0a3a4b91e010796be1d4">李宏毅老师讲解BN</a></p>
<h2 id="迁移学习"><a href="#迁移学习" class="headerlink" title="迁移学习"></a>迁移学习</h2><h2 id="组卷积GConv"><a href="#组卷积GConv" class="headerlink" title="组卷积GConv"></a>组卷积GConv</h2><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul>
<li>超参数对训练的影响：batch大小，学习率，Adam的Alpha值等等</li>
<li>看Alexnet的源码学习代码架构</li>
<li>更改loss函数对什么方面产生影响</li>
<li>batchnorm（Resnet）</li>
</ul>
<h1 id="九、L1-L2-smooth-L1"><a href="#九、L1-L2-smooth-L1" class="headerlink" title="九、L1 L2 smooth-L1"></a>九、L1 L2 smooth-L1</h1><p><a href="https://cloud.tencent.com/developer/article/1441560">详解L1、L2、smooth L1三类损失函数 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<h1 id="pytorch"><a href="#pytorch" class="headerlink" title="pytorch"></a>pytorch</h1><p>narrow方法：提取多维tensor某一数据</p>
<p>AverageMeter类：记录和更新数据</p>
<p>view方法：重新调整tensor的形状</p>
<p>AdaptiveAvgPool2d()自适应平均池化：接受两个参数，分别为输出特征图的长和宽，构造模型的时候，AdaptiveAvgPool2d()的位置一般在卷积层和全连接层的交汇处，以便确定输出到Linear层的大小。</p>
<p>parser.add_argument：参数选择：default和action的区别，action表示该变量在命令行内被提及，parser内该变量才为true</p>
<p>squeeze函数：从数组的形状中删除单维度条目，即把shape中为1的维度去掉</p>
<p>获取tensor维度： a.shape[0],a.size(0)，shape和.size()都是查看tensor维度的工具，输出torch.size(….)</p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>歌曲锐评</title>
    <url>/2022/06/27/%E6%AD%8C%E6%9B%B2%E8%AF%84%E4%BB%B7/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Capper–520赫兹-收录于2022-6-27"><a href="#Capper–520赫兹-收录于2022-6-27" class="headerlink" title="Capper–520赫兹    收录于2022/6/27"></a>Capper–520赫兹    收录于2022/6/27</h1><p><img src="/2022/06/27/%E6%AD%8C%E6%9B%B2%E8%AF%84%E4%BB%B7/image-20220627231843452.png" alt="image-20220627231843452"></p>
<h2 id="歌曲评价"><a href="#歌曲评价" class="headerlink" title="歌曲评价"></a>歌曲评价</h2><p>自从中国有嘻哈里capper走进大众视线，我就知道他能扛起00后的大旗。他做的风格是mumble rap，并不是他不能吐字清晰，而是他能非常完美的驾驭mumble。他的录音室作品，体现了他国内顶级的mumble腔调，用力的慵懒感，听感拉满；他的现场，他会街舞，身体的律动加上惹人喜爱的flow和腔调，是21世纪国内难以享受的现场氛围。</p>
<p>这首歌是他最出圈的一首情歌，歌词写的恰到好处，把爱情里的喜怒哀乐都能囊括，配合上优秀的编曲、作曲和混音，当然还有capper本人的腔调技巧，把时间尽头拉在听众的面前。</p>
<h2 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">喜欢和她见面</span><br><span class="line">可距离给的感觉</span><br><span class="line">是忽明又忽灭</span><br><span class="line">她谜底总是留着悬念</span><br><span class="line">我甚至感到厌倦</span><br><span class="line">被掐灭的香烟</span><br><span class="line"></span><br><span class="line">雾锁云埋</span><br><span class="line">总是在答案边徘徊</span><br><span class="line">不想醒来</span><br><span class="line">像一杯美式没冰块</span><br><span class="line"></span><br><span class="line">好奇她的房间</span><br><span class="line">坐在她的窗边</span><br><span class="line">等她眼睛睁开</span><br><span class="line">下雨还是晴天</span><br><span class="line">依偎在我身边</span><br><span class="line">调昏暗的光线</span><br><span class="line"></span><br><span class="line">别再怀念 </span><br><span class="line">有些人不值得 没必要留恋</span><br><span class="line">别再冬眠 </span><br><span class="line">去热烈的夏天</span><br><span class="line"></span><br><span class="line">Shawty like melody in my head</span><br><span class="line">Replay iffy in my head</span><br><span class="line">我想留住的画面</span><br><span class="line">把心动拍成胶片</span><br><span class="line">Shawty like melody in my head</span><br><span class="line">Replay iffy in my head</span><br><span class="line">是最熟悉的音乐</span><br><span class="line">我却不熟练表演</span><br><span class="line"></span><br><span class="line">Ouu-ouuu-ouu-ou</span><br><span class="line">猜不透你的活动心理</span><br><span class="line">软禁在你发的短信</span><br><span class="line">like youu-ouu-ouu</span><br><span class="line">读不懂你的所有神情</span><br><span class="line">会牵动我神经</span><br><span class="line"></span><br><span class="line">沉浸在落日晚风中的意外</span><br><span class="line">树莓般的晚霞对你透着溺爱</span><br><span class="line">在提醒我小心</span><br><span class="line">因为一不小心我就会爱上你</span><br><span class="line">Maybe we should link</span><br><span class="line">我录下你的声音放进采样集</span><br><span class="line">伴随着我的心跳 在扑通扑通扑到海浪里</span><br><span class="line"></span><br><span class="line">这动人的情节 就像收到幸运的请帖</span><br><span class="line">浓度很高 倒杯不流的DQ暴风雪</span><br><span class="line">其他我看不见 一起走到终点</span><br><span class="line">数一年又一年 用音乐装时间</span><br><span class="line"></span><br><span class="line">像关了禁闭</span><br><span class="line">心动的感觉总在掩饰下藏匿</span><br><span class="line">像是深海里的宝箱里面装满金币</span><br><span class="line">骇浪也因此骤停 可你却不求名利</span><br><span class="line">短暂的心悸</span><br><span class="line">我还没看到你笑我怎么放弃</span><br><span class="line">你要相信这段感情一定百无禁忌</span><br><span class="line">下次见到你 我想要</span><br><span class="line"></span><br><span class="line">hold you body like this x2</span><br><span class="line">这部言情电影</span><br><span class="line">还没公映</span><br><span class="line">I wanna</span><br><span class="line">hold you body like this x2</span><br><span class="line">这部言情电影</span><br><span class="line">还没公映</span><br><span class="line"></span><br><span class="line">Shawty like melody in my head</span><br><span class="line">Replay iffy in my head</span><br><span class="line">我想留住的画面</span><br><span class="line">把心动拍成胶片</span><br><span class="line">Shawty like melody in my head</span><br><span class="line">Replay iffy in my head</span><br><span class="line">是最熟悉的音乐</span><br><span class="line">我却不熟练表演</span><br></pre></td></tr></table></figure>

<h1 id="Drake–Honestly-Nevermind-收录与2022-6-30"><a href="#Drake–Honestly-Nevermind-收录与2022-6-30" class="headerlink" title="Drake–Honestly, Nevermind   收录与2022/6/30"></a>Drake–Honestly, Nevermind   收录与2022/6/30</h1><p><img src="/2022/06/27/%E6%AD%8C%E6%9B%B2%E8%AF%84%E4%BB%B7/image-20220630225054469.png" alt="image-20220630225054469"></p>
<h2 id="歌曲评价-1"><a href="#歌曲评价-1" class="headerlink" title="歌曲评价"></a>歌曲评价</h2><p>做喜欢的美国Rapper公鸭发布了2022年的第一张大专辑。听到先导曲的那一刻我就觉得这张专辑是风格的又一次转变。专辑里大部分的歌曲是Deep Vocal House的曲风，环绕全世界的氛围音色和魔性的低音合成器，配合上Drake独一无二的嗓音，将氛围烘托上了又一个高度。我敬佩公鸭的一个点就是，他随随便便的一个口水音“啧”都能契合在歌曲内，让听众如实的感受到歌曲想表达的那种环境和思想；除此之外，公鸭的flow配合上他的R&amp;B腔调，把我们带回去2016年Drake的《Passionfruit》，重回那个车载音乐单曲循环的童年。</p>
<p><strong>Drake did!</strong></p>
<h1 id="ILLENIUM–Afterlife-feat-Echos"><a href="#ILLENIUM–Afterlife-feat-Echos" class="headerlink" title="ILLENIUM–Afterlife feat. Echos"></a>ILLENIUM–Afterlife feat. Echos</h1><p><img src="/2022/06/27/%E6%AD%8C%E6%9B%B2%E8%AF%84%E4%BB%B7/image-20220630230020675.png" alt="image-20220630230020675"></p>
]]></content>
      <categories>
        <category>生活的碎碎念</category>
      </categories>
      <tags>
        <tag>音乐</tag>
        <tag>锐评</tag>
      </tags>
  </entry>
  <entry>
    <title>记录搭建博客的那些事</title>
    <url>/2021/12/19/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E5%80%99%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<h1 id="有话要说"><a href="#有话要说" class="headerlink" title="有话要说"></a>有话要说</h1><p>​        现在是大二上学期刚考完物理实验考试的一个下午。搁置了很久的待办终于完成了——搭建一个技术博客。当初看到科协里大家都有属于自己的技术博客，就一直很想搭建一个属于自己的博客。</p>
<span id="more"></span>

<p>抛开新鲜感不谈，想搭建博客的原因有很多：</p>
<ul>
<li>记录大学内的学习历程，记录自己变得越来越好</li>
<li>回顾自己从前的时间点，督促自己要计划好未来的学习历程并设定时间点</li>
<li>找工作面试能给面试官加分</li>
<li>等等</li>
</ul>
<p>​        近朱者赤近墨者黑，周围的同学都很优秀，希望大学四年能从他们身上学到很多技术，学到很多人生哲理。希望四年后纵向比较自己，能看得出来自己有变化。</p>
<p>​        我希望这个博客能经常更新，并且不是为了更新而更新，而是真的学习到了干货而写出的技术博客。初步设想在这个博客里投放<strong>技术博客、生活日记（仅对自己可见）、个人感想</strong>等文章。现在我还是个博客小白，要学的东西还有很多，比如如何编写出思路清晰、布局美观的博客（这就要慢慢熟悉markdown语法了）</p>
<p>​        少画饼，少偷懒，多交际，多做事。</p>
<p>​        <strong>我的博客搭建采用的是Hexo＋github pages方案，属于不需要租借域名的方案。</strong></p>
<hr>
<h1 id="学习搭建博客浏览过的有用的教程网站"><a href="#学习搭建博客浏览过的有用的教程网站" class="headerlink" title="学习搭建博客浏览过的有用的教程网站"></a>学习搭建博客浏览过的有用的教程网站</h1><p><a href="https://www.cnblogs.com/huanhao/p/hexobase.html">【基础篇】hexo博客搭建教程 （参考的配置文件教程）</a><strong>PS：属于是从头到尾保姆级教程了，按着它的步骤做，就能搭建成功。</strong></p>
<p><a href="https://theme-stun.github.io/docs/zh-CN/guide/primary.html#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">新手上路 | hexo-theme-stun （主题stun的指导教程）</a>PS：<strong>我采用的Hexo主题是stun</strong>，这里是stun官方提供的教学文档，可以调整自己的博客界面等等，整出更多花样</p>
<p><strong>下面是写博客要查的东西</strong></p>
<p><a href="https://markdown.com.cn/basic-syntax/">Markdown 基本语法 | Markdown 官方教程</a>PS：markdown的基本语法（另外还有扩展语法），当作字典使用。常用的为<strong>标题</strong>、<strong>列表</strong>、<strong>图片</strong>、<strong>超链接</strong>、<strong>代码块</strong>功能。</p>
<p><a href="https://www.typora.net/1249.html">Typora入门：全网最全教程 | typora中文网</a>PS：Typora的快捷键字典，用<code>Ctrl</code>＋<code>F</code>搜索关键词</p>
<h1 id="搭建时碰到的新领域"><a href="#搭建时碰到的新领域" class="headerlink" title="搭建时碰到的新领域"></a>搭建时碰到的新领域</h1><table>
<thead>
<tr>
<th>新领域</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Hexo</td>
<td>Hexo 是一个快速、简洁且高效的博客框架。</td>
</tr>
<tr>
<td>Github</td>
<td>一个开源代码社区，可以分享自己的作品</td>
</tr>
<tr>
<td>CSS</td>
<td>用来指定文档如何通过HTML展示给用户的一门语言</td>
</tr>
</tbody></table>
<h2 id="关于Hexo"><a href="#关于Hexo" class="headerlink" title="关于Hexo"></a>关于Hexo</h2><p>​        Hexo 是一个快速、简洁且高效的博客框架。官网：<a href="https://hexo.io/zh-cn/">Hexo</a>。上文提到的搭建博客教程内阐述了如何安装以及使用Hexo框架，在这里就不再赘述。它可以建立一个离线博客，即在本地运行hexo配置的文件（git bash内用hexo s命令），用<a href="http://localhost:4000即可登录（注意这只是本地网址，只有自己的电脑可以访问）。">http://localhost:4000即可登录（注意这只是本地网址，只有自己的电脑可以访问）。</a></p>
<h4 id="基于hexo建立的博客文件概览"><a href="#基于hexo建立的博客文件概览" class="headerlink" title="基于hexo建立的博客文件概览"></a>基于hexo建立的博客文件概览</h4><p><img src="/2021/12/19/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E5%80%99%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/image-20211219154727502.png" alt="image-20211219154727502"></p>
<ul>
<li><p><strong>.github文件夹</strong>：自己用SSH绑定的GitHub的一个配置文件夹，可以将本文件夹（blog）与github库链接起来</p>
</li>
<li><p><strong>source文件夹</strong>：里面存放md文件，是你更新上博客的文档</p>
</li>
<li><p><strong>_config.yml文件</strong>：博客的配置文档，用IDE打开编辑即可（我用的时notepad++）</p>
</li>
</ul>
<hr>
<h1 id="搭建博客出现的问题"><a href="#搭建博客出现的问题" class="headerlink" title="搭建博客出现的问题"></a>搭建博客出现的问题</h1><h2 id="1-网页加载不出CCS"><a href="#1-网页加载不出CCS" class="headerlink" title="1. 网页加载不出CCS"></a>1. 网页加载不出CCS</h2><p>问题如下：将离线博客与github pages结合后，打开的是没有画面的博客。</p>
<p><img src="/2021/12/19/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E5%80%99%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/QQ%E5%9B%BE%E7%89%8720211219155304.png" alt="QQ图片20211219155304"></p>
<p>​        请教了于哥，他一句“CSS没上来”让我豁然开朗。于是我了解了CSS是什么，我个人理解为网页前端的一个界面可视化代码。我便搜了下“hexo博客CSS丢失”找到了一篇解决文档：<a href="https://blog.csdn.net/weixin_46187747/article/details/104575042">hexo部署博客没有样式等问题_青空的博客-CSDN博客_hexo没有样式</a>原来是config文件内url没有于自己博客的域名绑定，更改后如下：</p>
<p><img src="/2021/12/19/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E5%80%99%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/image-20211219155705942.png" alt="image-20211219155705942"></p>
<p>​        随后在gitbash内hexo g和hexo d更新一下就好啦</p>
<h2 id="2-GitHub-pages给的域名过长"><a href="#2-GitHub-pages给的域名过长" class="headerlink" title="2. GitHub pages给的域名过长"></a>2. GitHub pages给的域名过长</h2><p>​        pages里给的域名是根据个人账号的名字和库的名字来命名的，我的GitHub账号叫polo-0831，新建用于存放博客代码的库叫做polos-blog，于是pages自动生成了<a href="https://polo-0831.github.io/polos-blog.github.io/%E7%9A%84%E5%9F%9F%E5%90%8D%E3%80%82%E6%B2%A1%E9%94%99%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%9F%9F%E5%90%8D%E5%A4%AA%E9%95%BF%E5%A4%AA%E4%B8%91%E4%BA%86%EF%BC%8C%E8%80%8C%E4%B8%94%E5%9C%A8%E5%8D%9A%E5%AE%A2%E5%86%85%E8%B7%B3%E8%BD%AC%E5%9C%B0%E5%9D%80%E6%97%B6%E4%BC%9A%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E3%80%82%E5%8D%9A%E5%AE%A2%E5%86%85%E7%9A%84%E6%89%80%E6%9C%89%E6%8C%89%E9%92%AE%E6%89%80%E9%93%BE%E6%8E%A5%E7%9A%84%E7%BD%91%E5%9D%80%E9%83%BD%E6%98%AFGitHub%E4%B8%8A%E5%BA%93%E5%86%85%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8C%E5%BD%93%E4%BD%A0%E6%8A%8A%E9%BC%A0%E6%A0%87%E6%94%BE%E5%9C%A8%E2%80%9C%E9%A6%96%E9%A1%B5%E2%80%9D%E8%BF%99%E4%B8%AA%E6%8C%89%E9%92%AE%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%B7%A6%E4%B8%8B%E8%A7%92%E4%BC%9A%E6%98%BE%E7%A4%BA%E9%93%BE%E6%8E%A5%E7%9A%84%E7%BD%91%E5%9D%80%E5%A6%82%E4%B8%8B%E5%9B%BE%EF%BC%9A">https://polo-0831.github.io/polos-blog.github.io/的域名。没错，这个域名太长太丑了，而且在博客内跳转地址时会出现问题。博客内的所有按钮所链接的网址都是GitHub上库内的文件，当你把鼠标放在“首页”这个按钮的时候，左下角会显示链接的网址如下图：</a></p>
<p><img src="/2021/12/19/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E5%80%99%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/image-20211219160220211.png" alt="image-20211219160220211"></p>
<p>可以看出，如果域名时那个又长又臭的域名的话，跳转的地址并不是库内的地址，会出现404报错。</p>
<p>解决方法：将库名字修改成与自己github账号名字相同，pages自动生成的网址便会自动缩短：<a href="https://polo-0831.github.io/">PoLo Welcome! (polo-0831.github.io)</a></p>
<p><strong>问题解决！</strong></p>
<hr>
<h1 id="更新博客步骤"><a href="#更新博客步骤" class="headerlink" title="更新博客步骤"></a>更新博客步骤</h1><ol>
<li><p>在博客目录下git bash，输入<code>hexo new [模板] (标题)</code>创建新文档和对应的文件夹（放图片），模板为hexo内置的三个文档模板，即md文件开头的信息框，在blog/scaffolds里可以查看，默认是post。</p>
</li>
<li><p>在博客文件夹父路径下打开git bash，输入<code>hexo g</code>和<code>hexo d</code>更新上即可（PS：hexo g是hexo generate的意思，hexo d是hexo deploy的意思，我理解为即用hexo里的deploy工具将文件上传上去。教程内在配置config文件的时候也修改了deploy的定义，修改为git）</p>
<hr>
</li>
</ol>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>​        这是我在复习周匆忙写的文档，时间紧没有用心写。希望未来的文档能够越写越漂亮！</p>
<hr>
<h1 id="关于修改主题配置文件—-2022-6-25更新"><a href="#关于修改主题配置文件—-2022-6-25更新" class="headerlink" title="关于修改主题配置文件—-2022/6/25更新"></a>关于修改主题配置文件—-2022/6/25更新</h1><p>资料补充：<a href="https://github.com/liuyib/hexo-theme-stun">主题github库：liuyib/hexo-theme-stun: 🦄 An elegant theme for Hexo (github.com)</a></p>
<p>​        <strong>修改主题配置文件应在D:\Blog\source\ __data\stun.yml配置文件内修改</strong>，而不是stun主题内的与hexo配置文件重名的_config.yml，否则会出现部署之后博客没变化的情况。</p>
<p>关于原因可以查看我在作者github上的Issue：<a href="https://github.com/liuyib/hexo-theme-stun/issues/271">主页顶部背景图片无法显示 · Issue #271 · liuyib/hexo-theme-stun (github.com)</a></p>
<h1 id="添加了站长管理工具—-2022-6-25更新"><a href="#添加了站长管理工具—-2022-6-25更新" class="headerlink" title="添加了站长管理工具—-2022/6/25更新"></a>添加了站长管理工具—-2022/6/25更新</h1><p>什么是站长管理工具？从功能上理解，就是把你的个人域名报备到搜素引擎里，让搜索引擎统计你的域名网站的数据，例如搜索次数、网站覆盖率等，并允许搜索引擎的爬虫程序爬到你。</p>
<p>谷歌站长管理工具：</p>
<p><img src="/2021/12/19/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E5%80%99%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/image-20220625210024054.png" alt="image-20220625210024054"></p>
<p>必应站长管理工具：<img src="/2021/12/19/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E5%80%99%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/image-20220625204426189.png" alt="image-20220625204426189"></p>
<p>百度站长管理工具：</p>
<p><img src="/2021/12/19/%E8%AE%B0%E5%BD%95%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E5%80%99%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/image-20220625211100626.png" alt="image-20220625211100626"></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>记录Windows更新后崩溃</title>
    <url>/2022/02/11/%E8%AE%B0%E5%BD%95Windows%E6%9B%B4%E6%96%B0%E5%90%8E%E5%B4%A9%E6%BA%83-1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    我的电脑型号是<strong>机械革命Z3 Air-S10代 i7 显卡RTX2060 1T固态硬盘 32G内存</strong>，高中毕业后2020年7月在淘宝官方网店买的。</p>
<p>​    2021年上半年一次阿波罗社团培训需要带电脑去配置环境，当时应该是不小心摔了一下导致开机后出现乱码卡住。。当时青涩的我很紧张，心想8000块电脑说坏就坏，真败家！学长也是第一次碰见这种问题无能为力（毕竟不同电脑问题不一样），于是我咨询了机械革命的线上售后，具体什么回复记不得了，反正一点用没有。</p>
<p>​    不得不提一嘴，机械革命的线下维修门店太少了，整个广州就只有天河有一家，打电话还打不通。。。</p>
<p>​    最后解决的方法居然是：晾在一边一两天。重新开机就好了😓不过从此以后Windows系统就是不是会卡顿，设置有时候会打不开。并且我的电脑会变成这样：没名称😓</p>
<p><img src="/2022/02/11/%E8%AE%B0%E5%BD%95Windows%E6%9B%B4%E6%96%B0%E5%90%8E%E5%B4%A9%E6%BA%83-1/image-20220211154256815-16445653809671.png" alt="image-20220211154256815"></p>
<span id="more"></span>



<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>​    事情要从2021.2.10晚说起。。。。</p>
<p>​    这个晚上，windows关机时出现了更新按钮，也就是这样：</p>
<p><img src="/2022/02/11/%E8%AE%B0%E5%BD%95Windows%E6%9B%B4%E6%96%B0%E5%90%8E%E5%B4%A9%E6%BA%83-1/image-20220211150135911.png" alt="image-20220211150135911"></p>
<p>​    我心想：好家伙，这次更新之后又会出现什么bug？我肯定不更新。事与愿违，我把电脑晾在一边睡觉去了。第二天起来电脑就自动更新并重启了！！！由于我电脑是ubuntu20.04和windows双系统，打开电脑一看是Ubuntu的登陆界面（即昨晚重启了一下，电脑开机默认引导到ubuntu上）。</p>
<p>​    坏了，该不会windows给我自动更新了吧。我怀着忐忑的心情重启进入windows，令我最害怕的事情发生了。</p>
<h2 id="Windows10崩溃"><a href="#Windows10崩溃" class="headerlink" title="Windows10崩溃"></a>Windows10崩溃</h2><p>​    崩溃过程是这样的：</p>
<p>​        输入密码进入Windows→能正常使用→<strong>打开开始菜单→Windows界面崩溃，鼠标能动但是点不了任何东西</strong>→长按电源键关机</p>
<p>细节：</p>
<ol>
<li>按电源键开机后能明显的听得到电流滋了一声</li>
<li>进入win后右键刷新、打开文件夹、打开设置都会有明显卡顿</li>
<li>拼音输入法不显示提示词条</li>
</ol>
<h2 id="思考解决方法"><a href="#思考解决方法" class="headerlink" title="思考解决方法"></a>思考解决方法</h2><ol>
<li><p>开机时候有电流声音→会不会是硬盘出了问题？→查资料无果，准备请求官方售后</p>
</li>
<li><p>打开关于windows的UI会卡顿→会不会是系统更新后不稳定？→查询资料发现有几种办法</p>
<p>1.恢复windows系统时间点→我之前没有备份过时间点于是不能恢复到更新之前→×</p>
<p>2.重装系统→需要硬盘备份文件，并且要考虑双系统引导失败的后果→尚未实现</p>
</li>
<li><p>打开开始菜单会卡顿→于是参考了这篇博客，把Windows播放动画选项关掉了<a href="https://www.jb51.net/os/win10/374647.html">Win10开始菜单反应很慢很卡怎么办？ 三种技巧任你挑选_windows10_Windows系列_操作系统_脚本之家 (jb51.net)</a>→开始菜单可以打开了→√</p>
<p><img src="/2022/02/11/%E8%AE%B0%E5%BD%95Windows%E6%9B%B4%E6%96%B0%E5%90%8E%E5%B4%A9%E6%BA%83-1/image-20220211153122913.png" alt="image-20220211153122913"></p>
</li>
<li><p>后来发现重启Windows资源管理器可以刷新系统，这样就不用每次卡住就热关机了<img src="/2022/02/11/%E8%AE%B0%E5%BD%95Windows%E6%9B%B4%E6%96%B0%E5%90%8E%E5%B4%A9%E6%BA%83-1/image-20220211153220743.png" alt="image-20220211153220743"></p>
</li>
<li><p>输入拼音不显示联想词条→参考这篇博客<a href="https://blog.csdn.net/weixin_44214577/article/details/113729407"> win10微软拼音输入法无提示怎么办</a>，把微软输入法旧版本的开关打开，使用旧版本就可以显示了。博客说是版本兼容性的问题。→Windows更新后出现bug或者不兼容的一个有利证据。</p>
<p><img src="/2022/02/11/%E8%AE%B0%E5%BD%95Windows%E6%9B%B4%E6%96%B0%E5%90%8E%E5%B4%A9%E6%BA%83-1/image-20220211153642930.png" alt="image-20220211153642930"></p>
<p>老版本输入法↑</p>
<p><img src="/2022/02/11/%E8%AE%B0%E5%BD%95Windows%E6%9B%B4%E6%96%B0%E5%90%8E%E5%B4%A9%E6%BA%83-1/image-20220211153657928.png" alt="image-20220211153657928"></p>
<p>输入法无联想词的bug↑</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    到此为止，问题筛选出来可能是Windows更新后不稳定，导致打开UI会卡顿。</p>
<h2 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h2><pre><code> 1. 不要随意更新系统，最好关闭关机并更新的这个提示，网上有教程
 2. 最好准备好一个硬盘备份文件，以免不时之需。同时也要熟练重装系统的操作😓比如格式化C盘重装
</code></pre>
<p>​                                                                                                                                                       罗梓淇</p>
<p>​                                                                                                                                      记录于2022.2.11</p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
  </entry>
  <entry>
    <title>第十七届智能车竞赛回忆----无缘国赛</title>
    <url>/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>​    本博客纯属记录，没有任何有参考意义的技术支持，也不能算是一个经验帖，当故事看吧</p>
<p>​    记录备战经历、生活小细节和小思考</p>
<span id="more"></span>

<h1 id="备战经历"><a href="#备战经历" class="headerlink" title="备战经历"></a>备战经历</h1><h2 id="2022-03小荷才露尖尖角"><a href="#2022-03小荷才露尖尖角" class="headerlink" title="2022.03小荷才露尖尖角"></a>2022.03小荷才露尖尖角</h2><p>作为学院科协的一员，接触到了嵌入式这方面诱人的技术。一次偶然的机会，科协内的三名意气风发的少年决定参加一次智能车竞赛。酷爱光影的我自然而然的担当了视觉部分的代码搭建，尽管水平与他人相比仍有巨大不足，但还是抱着求知胜于名誉的心态参加了竞赛。</p>
<p>我们最终决定了智能视觉组，是一个任务及其繁多且相对困难的一条赛道。记得刚拿到官方发布的图片数据集的时候，兴高采烈的筹神经网络训练，然后被图片里一张又一张奇奇怪怪的“物体”给逗笑了。</p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220325_165344.jpg" alt="IMG_20220325_165344"></p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220312_155717.jpg" alt="IMG_20220312_155717"></p>
<p>视觉筹备开始的早，地图识别和网络模型训练早早的就完成了总体架构的编写，对控制和硬件不熟悉的我帮不了队友很多的忙，两位队友正在设计控制姿态方案，思考小车硬件如何设计和IMU的数据处理、控制算法。</p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220318_170224.jpg" alt="IMG_20220318_170224"></p>
<p>前期我们一点点推进，由于考试和其他项目，我们并没有花太多精力在智能车上。</p>
<h2 id="2022-05校赛"><a href="#2022-05校赛" class="headerlink" title="2022.05校赛"></a>2022.05校赛</h2><p>由于学校的实验室大小有限，我们只好与平衡信标组共用一个场地，艰难的完成了校赛前的准备（尽管做出来的效果一言难尽），不过学校内没有第二组智能视觉，我们代表全校唯一一队出战。</p>
<h2 id="2022-07居无定所"><a href="#2022-07居无定所" class="headerlink" title="2022.07居无定所"></a>2022.07居无定所</h2><p>由于南京疫情愈发严重，学校为了保障学生安全不允许学生留校，没有了场地和设备的我们，久经波折，在南通海门的社区内自费租了房子和场地，自己搭建比赛场地进行调试。是为了国奖吗？是为了得到认可吗？对我来说不是的，我是享受这种和朋友一起学习新知识的氛围。</p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220703_122041.jpg" alt="IMG_20220703_122041"></p>
<h2 id="2022-07中华小当家"><a href="#2022-07中华小当家" class="headerlink" title="2022.07中华小当家"></a>2022.07中华小当家</h2><p>如图，粤菜的含金量</p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220703_204841.jpg" alt="IMG_20220703_204841"></p>
<p><strong>主播吃的比较清淡</strong></p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220704_113622.jpg" alt="IMG_20220704_113622"></p>
<p>主播家传的蒸鱼，粤菜就是要保留鱼的鲜味</p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220704_173752.jpg" alt="IMG_20220704_173752"></p>
<p>嘿，蛋炒饭</p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220705_113156.jpg" alt="IMG_20220705_113156"></p>
<p>番茄炒蛋和西红柿炒鸡蛋</p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220706_185106.jpg" alt="IMG_20220706_185106"></p>
<p>粤菜就是要保留鸡的鲜味</p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220707_184246.jpg" alt="IMG_20220707_184246"></p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220708_190020-16610058669032.jpg" alt="IMG_20220708_190020"></p>
<p>主播新学的水煮牛肉,一致好评111</p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220716_123232.jpg" alt="IMG_20220716_123232"></p>
<h2 id="2022-08方案逐渐成形"><a href="#2022-08方案逐渐成形" class="headerlink" title="2022.08方案逐渐成形"></a>2022.08方案逐渐成形</h2><p>8月份到了，在观看了其他赛区的比赛后，我们一点点的确定了最终方案。</p>
<ul>
<li>控制（略）：麦克纳姆轮全向行进，采用速度规划，IMU陀螺仪进行角度环纠正</li>
<li>硬件（略）：突出点在于双分类搬运（即两块电磁铁同时搬运图片）</li>
<li>视觉：旋转、实拍和亮度调整等方法增广原数据集采用MobileNetV2轻量级网络训练出tflite模型，验证准确率达到98%；微调方式采用色块识别，模型检测采用矩形检测提取出图像ROI区域丢入神经网络分类；总钻风寻找车前一定扇形视野内的二值化图像内的图片并向该方向前进直至art寻找到图片的黄色色块；</li>
<li>状态机：<ul>
<li>行进：点与点和点与边之间全向前进，编码器定位</li>
<li>寻图：在行进终点附近采用总钻风提取小车前方信息，寻找图片</li>
<li>微调：通过art的色块识别，将图片中心点调整在电磁铁下方</li>
<li>基准值调整：art提取图片上边界的边缘所得斜率，校准小车朝向，并根据置信度弥补小车陀螺仪累加数据</li>
<li>回库：根据库边黄线进行定位倒车入库停止</li>
</ul>
</li>
</ul>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220806_130439-16610059250373.jpg" alt="IMG_20220806_130439"></p>
<p>可以说，我们是从这一个月才开始正式的任务实现，在这不到20天内，PID参数、阈值调整、任务流编写等等需要耗费体力的任务我们逐一优化，最终在开赛前五天完赛，从某种意义来说，完赛的时间有点晚了。</p>
<p><a href="https://www.bilibili.com/video/BV1TV4y1x7ek?spm_id_from=333.999.0.0&vd_source=2625b5eda84e0a3a4b91e010796be1d4">无缘国赛，没想到这是我们唯一的一个完赛视频了_哔哩哔哩_bilibili</a></p>
<h2 id="2022-08记麦轮"><a href="#2022-08记麦轮" class="headerlink" title="2022.08记麦轮"></a>2022.08记麦轮</h2><p>麦克纳姆轮，AKA旋转血滴子、究极逆子。麦轮仗着它吃着航模电池提供的巨大的电流，喜欢怎么转就怎么转，想转多快转多快。在我们还没写速度保护的时候，控制PWM输出的一些数据忘记清零导致电流输出拉满，满PWM波输出给电机，小车就像龙卷风摧毁停车场一般在地面上到处乱撞，伴随着电机愤怒的吼叫和麦轮金属和墙壁激烈的碰撞，我们的心一下子提到了嗓子眼。面对眼前这个发了疯似的怪物，我们的呼吸变得急促。</p>
<p>“我们应该怎么放倒它！”</p>
<p>“别碰它，小心手！”</p>
<p>“抓住它！它完了我们也完了！”</p>
<p>“……”</p>
<p>在电源开关被艰难关掉后，空气中充满了宁静和电机过转的烧焦味。</p>
<p>“车没事吧，人没事吧”</p>
<p>为了救车，有时我们化身诺伊尔光速下地扑救、有时稳扎马步把“疯子”控制住，全身上下都受到过不同程度的割伤，我因此也被割开了一小块肉（图我就不放了，脑补一张满是血斑的纸巾吧）</p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220813_183451.jpg" alt="IMG_20220813_183451"></p>
<h2 id="2022-08-16开赛前一天"><a href="#2022-08-16开赛前一天" class="headerlink" title="2022.08.16开赛前一天"></a>2022.08.16开赛前一天</h2><p>致命BUG！！！！！偶尔上电轮子开始疯转、行进途中轮子突然疯转出发速度保护而紧急中断！！！巧妙的是，软件没有死，代码依旧正确运行；单独跑长距离行进的时候不会出现突然死亡的现象；驱动板电流正常……</p>
<p>我们一点点排查，查驱动、查供电、查接线、查软件….一切能根据bug现象演绎推理出的问题出处都互相矛盾，如果是软件死掉，那么紧急中断为什么还起作用呢？如果是驱动异常，为什么单跑长距离又能呢？如果是任务流逻辑出错，为什么偶尔好偶尔不好呢？如果是供电不足，为什么满电的时候又会出现这样的现象呢？</p>
<p>已经是开赛前一天了，我们毫无头绪，心脏也怦怦跳。那晚我没睡好，因为心里没底。但我们只能赌一把了，赌它赛场上不会发生这样离奇的bug（flag已立下）</p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220815_173829.jpg" alt="IMG_20220815_173829"></p>
<h1 id="比赛日Match-Day"><a href="#比赛日Match-Day" class="headerlink" title="比赛日Match Day"></a>比赛日Match Day</h1><h2 id="第零天8-17"><a href="#第零天8-17" class="headerlink" title="第零天8.17"></a>第零天8.17</h2><p>今天是通勤日，我们的任务是到达南京信息工程大学报到登记，领取参赛证，在附近的酒店下榻，紧张备战明天。</p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220818_060204.jpg" alt="IMG_20220818_060204"></p>
<h2 id="第一天8-18"><a href="#第一天8-18" class="headerlink" title="第一天8.18"></a>第一天8.18</h2><p>大清早是我们提交车模的时间，心心念念的线下赛道终于呈现在我眼前，看着体育馆里的“停车场”里停放着各个高校的智慧结晶，一种莫名的喜悦和成就感油然而生。</p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220820_083802-16610061074884.jpg" alt="IMG_20220820_083802"></p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/A0378A5D245800156973F9901CF369A3.jpg" alt="A0378A5D245800156973F9901CF369A3"></p>
<p>提交完车模后，我们便回到等候室等待我们上场。第一天是15分钟的比赛时间，当我踏上比赛场地的那一刻，我没有紧张，取而代之的是完全的理智，大脑高速运行计算着可能会出现的失误，细心的根据场地调整实现设定好的接口参数。</p>
<p>毕竟是第一次参赛，意外还是发生了。</p>
<p>意外之一：体育馆的大灯尤其亮，地板反光极多，一个人能有五六个影子，摄像头看到的画面跟天堂一样亮。由于事先考虑的不足（考虑到场地过暗和过量，但是没有考虑到在天堂比赛），并没有做好滤波和滤光的算法准备，导致视觉辅助定位方案完全失效，原本一主摄二辅摄直接拆成了单摄，随之伴随的是陀螺仪数据累加无法纠正和找不到图片，对完赛产生了巨大影响。</p>
<p>意外之二，也是最致命的意外：开赛前的疯转bug在赛场上百分百发生，整个15分钟，小车出库根本没跑多远或者刚出库就疯转触发紧急停止，导致我们第一天没有完赛，成绩：N/A</p>
<p>赛后回酒店我们心情都很忐忑，紧张分析着问题的原因：从场地阻尼、供电不足等硬件方面开始分析，还是无法精确定位这个bug，在强大的压力之下进行了一番心理斗争，最终决定了一套最稳妥的完赛策略（这时候我们的目标已经从进国赛降为完赛了，多么像微缩版的人生啊）</p>
<p>放弃双手搬运！取消辅摄保证供电稳定！找不到图片直接回库！</p>
<p>当然能给予我们安慰的，还有极低的完赛率。19支队伍第一天只有5支队伍完赛，且成绩多半不理想，意味着我们还有机会重夺排名。</p>
<p>“鲁棒性不好的队伍线下就体现出来了” ——– truth of cheese </p>
<h2 id="第二天8-19"><a href="#第二天8-19" class="headerlink" title="第二天8.19"></a>第二天8.19</h2><p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/BFEDF684B44E37179B683BE185C4230C.jpg" alt="BFEDF684B44E37179B683BE185C4230C"></p>
<p>第二天的比赛是8分钟，意味着我们只有2-3次的发车机会。踏入赛场的那一刻，一切正常运行。测当天场地的光照调整曝光度，抛弃两只小手搬运求稳。今天运气比较好，没有在小车行进过程中疯转，最终我们还是重新复用了两只小手的逻辑，在时间快结束的时候出发跑了一趟。这一趟搬了七张图片，然后因为陀螺仪数据飘掉了找不到图片了无法进行下去。大类识别搬运全部正确，但是少搬了七张罚识整整210s！最终成绩定格在不忍直视的373s。</p>
<p>内心五味杂陈</p>
<h2 id="离别"><a href="#离别" class="headerlink" title="离别"></a>离别</h2><p>我们的成绩一定无缘国赛了，于是我们定了当天晚上的高铁票，准备回城了。现在我正坐在这架高铁上写着这一篇博客。内心的百感交集写在下面的感想里吧。</p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/33E9A49EC8D54DA5E380432B4309067B.jpg" alt="img"></p>
<p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/64B34E95ED8E36899CF278C859C285C3-16610062534765.jpg" alt="64B34E95ED8E36899CF278C859C285C3"></p>
<h1 id="思考、感想、总结"><a href="#思考、感想、总结" class="headerlink" title="思考、感想、总结"></a>思考、感想、总结</h1><p>这一次大半年的备战最终取得这样的成果，说不可惜是不可能的，说完全没有能力也是不可能的，一步一步走到现在，不断克服着生活、疫情、技术缺陷带给我们前进上的困难，持之以恒且保持着良好心态也是能力的一部分吧。在疫情严重被学校赶走的时候，我们在一瞬间居无定所，不知何去何从，绞尽脑汁才自费找到了合适的房源和比赛场地，把能用到的设备和小车带出南邮的那一刻，我们仿佛像是被父母丢到野外自我成长的孩子一样，面对的是艰难的求学路。最开始我们觉得不值得，会抱怨为什么学校不允许留校，最终还是因为热爱，慢慢的看淡这一切，做好自己的本分，不去抱怨有多少的不公平。因为<strong>世界本就是不公平的，只有强者才能立足，如果不能，那还是不够强</strong>。作为社会达尔文主义的我，从小受到的教育就是这样，我的内心没有多大的触动，而是认为这是一次特别且难以遗忘的回忆，且这段旅程一定能学到不一样的东西。</p>
<p>辗转周折来到了海门，慢慢适应这里的生活并保持着自己的生活节奏。我依旧每天遵守自己制定的学习计划，自学雅思，调车，晚上灵感来了的时候偷偷以歌词或者随笔的方式记录下来，为我梦寐以求的微电影和专辑做筹备。学习无疑是快乐的，在每一次对这个世界、自然科学和人文社会产生疑问并思考的过程中，大脑都会分泌巨量的多巴胺取悦我自己，我喜欢思考，喜欢通过思考以自己独特的思想和角度去解释这个世界的人和物。我曾经产生过一个疑问，我的朋友们在这个时候都去实习去获取经验，而我还没有任何社会上的工作经历，是不是会落后？我的答案是否定的，我认为现在家庭条件还好的条件下，就好好珍惜这个学习的机会，毕竟大学过后能系统性学习且能有这样的学习氛围的机会少之又少，随之取代的是每日重复的996。（当然也不是说工作生活会很枯燥很平凡没有起伏，持有梦想和对生活的渴望，每一天都是不同的）所以我并不渴望大学期间这么早去实习，<strong>每个人有不同的路去走，我们应该做的是思考如何利用自己的强项走出属于自己独特的人生</strong>。</p>
<p>随着比赛将近，每天调车的时间越来越多，自学雅思的计划也中断了，目前为止只背了3000多个新单词，上了阅读和听力课而已，出国的梦想大概率是破裂了。但是，背的单词是自己的，<strong>学到的东西是自己的，是金子总会发光的</strong>，学习依然使我开心，多巴胺依然使我对每天充满希望。</p>
<p>比赛说结束就结束了，这个结果都能理解，确实是实力有待提升。不只是技术方面的，还有临场应变能力和知识储备，这也是竞赛的一部分。</p>
<p><strong>大部分的失败都不应该是不应该的，冥冥之中总有原因，如何找到这些原因并改善，成就了人类</strong></p>
<p>当年国足踢世界杯前，小组赛预想小负巴西，赢哥斯达黎加和土耳其小组第二进入淘汰赛，然后淘汰西班牙 德国 英格兰进入决赛，决赛拖入点球大战赢得世界杯（狗头）但事与愿违，实力赶不上不可抗力</p>
<p>大半年的努力，没有拿到国奖，保研的几率也变小了。可是，一次失败并不能否定一切，在人生的这一个阶段，也许我们没有达到我们理想的预期，也许没有通过技术和能力实现阶级跨越，结识到更加优秀的朋友；也许没有早早的赚大钱，好好回报父母；也许没有……</p>
<p><strong>作为男人，遭遇挫折的时候，无论是事业挫折、学业挫折还是感情挫折，都需要从情绪里抽离出来，理性复盘理性规划未来，重振雄风，重新开始新的生活。</strong></p>
<p>总的来说，这一次经历还是很难忘的。我认识了一群有趣的朋友，一起做饭一起睡觉，也许头发斑白的时候，我们这群人重新聚起来回忆，又是不一样的感觉；我在他们身上学到了更多的思考角度，对不同地域的思想也有了更多的理解，读万卷书不如行万里路嘛；当然也学到了许多嵌入式方向的知识，尽管我没有那么感兴趣，但是啥都喜欢学的我感觉很开心；提升了自己的生活能力，小时候以来的独具梦算是实现了一般了（大厨的自我肯定）；….</p>
<p><strong>日月升落，总有黎明。人生是一场戏，也是一场游戏，而且是士气游戏，我们应该加油鼓气，来日方长，不悔此生！</strong></p>
<h1 id="一些好看的照片"><a href="#一些好看的照片" class="headerlink" title="一些好看的照片"></a>一些好看的照片</h1><h2 id="海门的夕阳"><a href="#海门的夕阳" class="headerlink" title="海门的夕阳"></a><strong>海门的夕阳</strong></h2><p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220713_192117.jpg" alt="IMG_20220713_192117"></p>
<h2 id="海门电视塔"><a href="#海门电视塔" class="headerlink" title="海门电视塔"></a>海门电视塔</h2><p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/IMG_20220708_211020_edit_97593037383545.jpg" alt="IMG_20220708_211020_edit_97593037383545"></p>
<h2 id="《Be-with-me》"><a href="#《Be-with-me》" class="headerlink" title="《Be with me》"></a>《Be with me》</h2><p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/04AC92024B2F07A184D9712B131A46AD.jpg" alt="04AC92024B2F07A184D9712B131A46AD"></p>
<h2 id="这里是日本省启东市"><a href="#这里是日本省启东市" class="headerlink" title="这里是日本省启东市"></a>这里是日本省启东市</h2><p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/6D24D5941D451F5E9780CE93F6E14C78.jpg" alt="6D24D5941D451F5E9780CE93F6E14C78"></p>
<h2 id="“大鸟”"><a href="#“大鸟”" class="headerlink" title="“大鸟”"></a>“大鸟”</h2><p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/D966F5BB3F5A9129E729A8067074F462.jpg" alt="D966F5BB3F5A9129E729A8067074F462"></p>
<h2 id="靠自己离上海最近的一次"><a href="#靠自己离上海最近的一次" class="headerlink" title="靠自己离上海最近的一次"></a>靠自己离上海最近的一次</h2><p><img src="/2022/08/20/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E5%9B%9E%E5%BF%86-%E6%97%A0%E7%BC%98%E5%9B%BD%E8%B5%9B/D38CB3F2B64B429C936AE448B2CC1271.jpg" alt="D38CB3F2B64B429C936AE448B2CC1271"></p>
]]></content>
      <categories>
        <category>生活的碎碎念</category>
      </categories>
      <tags>
        <tag>智能车竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记：Deep Learning for Person Re-identification:A Survey and Outlook（行人重识别综述）</title>
    <url>/2022/06/04/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    武汉大学叶茫教授在2022年发布的一篇关于行人重识别Reid综述和展望的论文<strong>《Deep Learning for Person Re-Identification: A Survey and Outlook.》 –Mang Ye，行人重识别综述</strong>。</p>
<p>​    本篇论文主要讲述了：</p>
<ul>
<li><p>行人重识别领域发展以来的各种实现方法，并举出了它们的优缺点</p>
</li>
<li><p>总结Reid任务由五部分流程构成</p>
</li>
<li><p><strong>提出Close-world和Open-world两类型的Reid工作</strong></p>
</li>
<li><p>新的评价指标mINP；新的baseline：基于AGW的单-多模态reid</p>
</li>
</ul>
<p>这篇论文有利于行人重识别的初学者大致了解该领域先前的工作，这篇文章更加侧重Open-world类型的多模态行人重识别工作，也是目前困难比较多的行人重识别方向。</p>
<span id="more"></span>

<h2 id="计算机视觉论文中的Baseline"><a href="#计算机视觉论文中的Baseline" class="headerlink" title="计算机视觉论文中的Baseline"></a>计算机视觉论文中的Baseline</h2><p>​    在计算机视觉领域中的算法创新，都要有一个标准来进行比较才能知道新算法是否创新。</p>
<ul>
<li><p><strong>Benchmark</strong>：一个算法被称为Benchmark，是因为它的是因为它的性能已经被广泛研究，人们对它性能的表现形式、测量方法都非常熟悉，因此可以作为标准方法来衡量其他方法的好坏。简单来说创新的指标标准要好过benchmark的标准，一般新算法用SOTA（state-of-the-art）的算法作为benchmark是最好的。</p>
</li>
<li><p><strong>Baseline</strong>：一个算法被称为baseline，基本上表示比这个算法性能还差的基本上不能接受的，除非方法上有革命性的创新点，而且还有巨大的改进空间和超越benchmark的潜力，只是因为是发展初期而性能有限。所以baseline有一个自带的含义就是“性能起点”。这里还需要指出其另一个应用语境，就是在算法优化过程中，一般version1.0是作为baseline的，即这是你的算法能达到的一个基本性能，在算法继续优化和调参数的过程中，你的目标是比这个性能更好，因此需要在这个baseline的基础上往上跳。</p>
</li>
<li><p>简而言之，benchmark一般是和同行中比较牛的算法比较，比牛算法还好，那你可以考虑发好一点的会议/期刊；baseline一般是自己算法优化和调参过程中自己和自己比较，目标是越来越好，当性能超过benchmark时，可以发表了，当性能甚至超过SOTA时，恭喜你，考虑投顶会顶刊啦。</p>
<p>  参考链接：<a href="https://blog.csdn.net/qq_41088475/article/details/105756552">https://blog.csdn.net/qq_41088475/article/details/105756552</a>  </p>
</li>
</ul>
<h1 id="0-摘要"><a href="#0-摘要" class="headerlink" title="0.摘要"></a>0.摘要</h1><p>1）通过行人重识别领域的研究，将该领域分为封闭世界（closed-world）和开放世界（open-world）两大类研究。<br>2）封闭世界：<strong>深度特征表示学习</strong>，<strong>深度度量学习</strong>和<strong>排名优化</strong>。封闭世界的研究成果逐渐达到饱和，研究重心自然落在开放世界上，可用五个方面总结其研究。<br>3）提出名为<strong>AGW</strong>的baseline，引入针对ReID的新评价指标<strong>mINP</strong>。</p>
<h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h1><p>原文：Re-ID is a challenging task due to the presence of <strong>different viewpoints</strong>, <strong>varying low-image resolutions</strong> , <strong>illumination changes</strong>, <strong>unconstrained poses</strong> , <strong>occlusions</strong>, <strong>heterogeneous modalities</strong> , <strong>complex camera environments</strong>, <strong>background clutter</strong> , <strong>unreliable bounding box generations</strong>, etc. These result in varying variations and uncertainty. </p>
<p>目前reid（主要是开放世界）的研究困难主要在<strong>不同视角、参差不齐的低分辨率图像、光照变化、姿态不同、遮挡情况、异构模态数据</strong></p>
<h2 id="针对特定场景构成reid系统需要五个步骤"><a href="#针对特定场景构成reid系统需要五个步骤" class="headerlink" title="针对特定场景构成reid系统需要五个步骤"></a>针对特定场景构成reid系统需要五个步骤</h2><p><img src="/2022/06/04/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/image-20220604175417280.png" alt="image-20220604175417280"></p>
<p>1）<strong>原始数据收集</strong>：从处于不同环境的不同地方的摄像机获取原始视频数据。这些数据包含大量的背景杂波。<br>2）<strong>边界框（Bounding Box）生成</strong>：通过行人检测或跟踪算法从原始视频数据中提取包含行人图像的边界框。在大规模应用中不可能手动裁剪所有行人图像。<br>3）<strong>训练数据标注</strong>：对于区分行人任务来说，图像标注必不可少。<br>4）<strong>模型构建和训练</strong>：已经开发了广泛运用的模型，重点在于特征表示学习、度量学习或两者结合。<br>5）<strong>实践测试阶段</strong>：给定一个query和一组gallery，使用上一阶段训练完毕的模型进行行人特征提取，计算query图像和gallery图像的相似度进行排序。</p>
<h2 id="封闭世界和开放世界的五大差别有"><a href="#封闭世界和开放世界的五大差别有" class="headerlink" title="封闭世界和开放世界的五大差别有"></a>封闭世界和开放世界的五大差别有</h2><p>1、<strong>单模态和异构数据</strong>（Single-modality Data vs. Heterogeneous Data）：对于步骤1中的原始数据收集，默认所有行人都是在可见光单模态下进行拍摄的，但是在实际的开放世界中，数据可能是异构的，例如，行人可能是在不同光谱、草图、深度图像相机所捕获，甚至可能是文本描述。（这也是本博客关注的重点，即跨模态行人重识别）</p>
<p>2、<strong>边界框生成和原始图像/视频</strong>（Bounding Box Generation vs. Raw Images/Videos）：封闭世界中的行人重识别通常基于边界框提取的行人图像或视频进行训练和测试。但是在实际开放世界中需要直接从原始图像/视频中进行端到端的行人检索。</p>
<p>3、<strong>丰富的标签数据和不可用/有限的标签</strong>（Sufficient Annotated Data vs. Unavailable/Limited Labels）：封闭世界中，行人图像都是标注好的。但在实际应用中，标注费时费力成本高。故引发了有监督和无监督领域。</p>
<p>4、<strong>正确标签和噪声标签</strong>（Correct Annotation vs. Noisy Annotation）：现有的封闭世界的行人重识别领域通常假定所有标签清晰且正确。然而实际应用中，标签噪声和不完善正确的检索跟踪结果导致的样本噪声也都不可避免，故引出了不同噪声类型下的鲁棒行人ReID。</p>
<p>5、<strong>query是否存在于gallery中</strong>（Query Exists in Gallery vs. Open-set）：现有的封闭世界行人ReID都假设查询必须存在于图库中，并计算CMC和mAP。但是在现实情况中，查询行人不一定出现在图库中</p>
<h2 id="批注：Query和Gallery"><a href="#批注：Query和Gallery" class="headerlink" title="批注：Query和Gallery"></a>批注：Query和Gallery</h2><p>行人重识别的数据集与普通的视觉检测数据集不同，包括<strong>训练集、验证集、Query和Gallery</strong>，其中训练集和验证集是模型训练时候使用的，query是模型的输入数据，一张行人boundingbox叫prob，多个prob称为query。Gallery则是模型内存储的行人数据，prob就是要在gallery内寻找匹配的行人并且给出rank。</p>
<p><img src="/2022/06/04/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/image-20220604175952635.png" alt="image-20220604175952635"></p>
<h1 id="2-Closed-world-Re-ID（封闭世界）"><a href="#2-Closed-world-Re-ID（封闭世界）" class="headerlink" title="2.Closed-world Re-ID（封闭世界）"></a>2.Closed-world Re-ID（封闭世界）</h1><p>此设置通常具有以下假设：<strong>（即与开放世界的五大差别）</strong></p>
<p>​    1）通过单模态可见光摄像机捕获行人。</p>
<p>​    2）已经给出行人bounding box。</p>
<p>​    3）有足够的标注好的训练数据。用于监督训练。</p>
<p>​    4）标签通常是正确的。</p>
<p>​    5）query行人必须出现在图库中。</p>
<p>通常来说CW的ReID包括三个主要组件：</p>
<h2 id="2-1-Feature-Representation-Learning（特征表示学习）"><a href="#2-1-Feature-Representation-Learning（特征表示学习）" class="headerlink" title="2.1 Feature Representation Learning（特征表示学习）"></a>2.1 Feature Representation Learning（特征表示学习）</h2><p><img src="/2022/06/04/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/image-20220604180451609.png" alt="image-20220604180451609"></p>
<h3 id="2-1-1-Global-Feature-Representation-Learning（全局特征）"><a href="#2-1-1-Global-Feature-Representation-Learning（全局特征）" class="headerlink" title="2.1.1 Global Feature Representation Learning（全局特征）"></a>2.1.1 Global Feature Representation Learning（全局特征）</h3><p>将同一个行人的所有图像视为同一类（同一个ID），提取全局特征，将ReID任务视为一个多分类问题。<br>注意力机制也被广泛应用以增强特征表示学习。1）行人图像中attention 2）跨多行人注意力</p>
<h3 id="2-1-2-Local-Feature-Representation-Learning（局部特征）"><a href="#2-1-2-Local-Feature-Representation-Learning（局部特征）" class="headerlink" title="2.1.2 Local Feature Representation Learning（局部特征）"></a>2.1.2 Local Feature Representation Learning（局部特征）</h3><p>具体方案不在此赘述，基本思路即在全局特征之外附加局部特征信息，必定能通过更多信息获得更好的结果。但有些分块技术需要额外的人体姿态对齐策略辅助，而固定分块技术（例如PCB）通过水平划分来进行分块，对重度遮挡和背景杂波敏感。</p>
<h3 id="2-1-3-Auxiliary-Feature-Representation-Learning（辅助特征）"><a href="#2-1-3-Auxiliary-Feature-Representation-Learning（辅助特征）" class="headerlink" title="2.1.3 Auxiliary Feature Representation Learning（辅助特征）"></a>2.1.3 Auxiliary Feature Representation Learning（辅助特征）</h3><p>通常需要附加额外的注释信息，可以是文字注释（<strong>semantic attributes</strong>），或利用GAN生成额外的训练样本进行原有数据的扩充（<strong>GAN Generation</strong>）；除此之外还有<strong>Domain Information</strong>（DGD算法-Domain Guided Dropout）和<strong>Viewpoint Information</strong>（MLFN-Multi Level Factorisation Net）。</p>
<h3 id="2-1-4-Video-Feature-Representation-Learning-视频特征"><a href="#2-1-4-Video-Feature-Representation-Learning-视频特征" class="headerlink" title="2.1.4 Video Feature Representation Learning(视频特征)"></a>2.1.4 Video Feature Representation Learning(视频特征)</h3><h2 id="2-2-Deep-Metric-Learning（深度度量学习）"><a href="#2-2-Deep-Metric-Learning（深度度量学习）" class="headerlink" title="2.2 Deep Metric Learning（深度度量学习）"></a>2.2 Deep Metric Learning（深度度量学习）</h2><h3 id="2-2-1-Loss-Function-Design损失函数的设计"><a href="#2-2-1-Loss-Function-Design损失函数的设计" class="headerlink" title="2.2.1 Loss Function Design损失函数的设计"></a>2.2.1 Loss Function Design损失函数的设计</h3><p><img src="/2022/06/04/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/image-20220604181220879.png" alt="image-20220604181220879"></p>
<p>如图分为三种：<strong>交叉熵损失函数（简单的多分类）、验证损失（对比损失）、三元组损失</strong></p>
<h2 id="3-Open-World-Person-ReID（开放世界）"><a href="#3-Open-World-Person-ReID（开放世界）" class="headerlink" title="3.Open-World Person ReID（开放世界）"></a>3.Open-World Person ReID（开放世界）</h2><p>3.1 Heterogeneous Re-ID (多模态行人重识别)</p>
<p>3.2 End-to-End Re-ID </p>
<p>3.3 Semi-supervised and Unsupervise Re-ID</p>
<p>3.4 Noise-Robust Re-ID</p>
<p>3.5 Open-set Re-ID and Beyond</p>
<h2 id="4-AN-OUTLOOK-RE-ID-IN-NEXT-ERA"><a href="#4-AN-OUTLOOK-RE-ID-IN-NEXT-ERA" class="headerlink" title="4.AN OUTLOOK: RE-ID IN NEXT ERA"></a>4.AN OUTLOOK: RE-ID IN NEXT ERA</h2><ul>
<li><strong>新的评价指标mINP</strong></li>
<li><strong>AGW baseline</strong></li>
</ul>
]]></content>
      <categories>
        <category>论文笔记</category>
      </categories>
  </entry>
</search>
